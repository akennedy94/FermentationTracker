[{"C:\\Users\\aaron\\Desktop\\fermentationtracker\\src\\index.js":"1","C:\\Users\\aaron\\Desktop\\fermentationtracker\\src\\inputs\\FormInput.js":"2","C:\\Users\\aaron\\Desktop\\fermentationtracker\\src\\inputs\\NotesInput.js":"3","C:\\Users\\aaron\\Desktop\\fermentationtracker\\src\\Context.js":"4","C:\\Users\\aaron\\Desktop\\fermentationtracker\\src\\subcomponents\\projectDisplay.js":"5","C:\\Users\\aaron\\Desktop\\fermentationtracker\\src\\subcomponents\\LandingPage.js":"6","C:\\Users\\aaron\\Desktop\\fermentationtracker\\src\\subcomponents\\ProjectDisplay.js":"7","C:\\Users\\aaron\\desktop\\fermentationtracker\\src\\index.js":"8","C:\\Users\\aaron\\desktop\\fermentationtracker\\src\\Context.js":"9","C:\\Users\\aaron\\desktop\\fermentationtracker\\src\\subcomponents\\LandingPage.js":"10","C:\\Users\\aaron\\desktop\\fermentationtracker\\src\\subcomponents\\ProjectDisplay.js":"11","C:\\Users\\aaron\\desktop\\fermentationtracker\\src\\inputs\\NotesInput.js":"12","C:\\Users\\aaron\\desktop\\fermentationtracker\\src\\inputs\\FormInput.js":"13"},{"size":12082,"mtime":1616434850216,"results":"14","hashOfConfig":"15"},{"size":716,"mtime":1615918876584,"results":"16","hashOfConfig":"15"},{"size":355,"mtime":1615918876605,"results":"17","hashOfConfig":"15"},{"size":193,"mtime":1615918876274,"results":"18","hashOfConfig":"15"},{"size":6817,"mtime":1614018867958,"results":"19","hashOfConfig":"20"},{"size":1313,"mtime":1615918876646,"results":"21","hashOfConfig":"15"},{"size":7067,"mtime":1616004601196,"results":"22","hashOfConfig":"15"},{"size":12398,"mtime":1616440188960,"results":"23","hashOfConfig":"24"},{"size":193,"mtime":1615918876274,"results":"25","hashOfConfig":"24"},{"size":1313,"mtime":1615918876646,"results":"26","hashOfConfig":"24"},{"size":7067,"mtime":1616004601196,"results":"27","hashOfConfig":"24"},{"size":355,"mtime":1615918876605,"results":"28","hashOfConfig":"24"},{"size":716,"mtime":1615918876584,"results":"29","hashOfConfig":"24"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"33"},"az59rb",{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"qczz1n",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"33"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"jfi0jc",{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\aaron\\Desktop\\fermentationtracker\\src\\index.js",["60","61","62","63"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport FormInput from \"./inputs/FormInput\";\r\nimport NotesInput from \"./inputs/NotesInput\";\r\nimport ProjectDisplay from \"./subcomponents/ProjectDisplay.js\";\r\nimport LandingPage from \"./subcomponents/LandingPage.js\";\r\nimport axios from \"axios\";\r\nimport { Form, Button, Row, Col, Navbar, Nav } from \"react-bootstrap\";\r\nimport { toast } from \"react-toastify\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport \"./css/index.css\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { ContextConsumer, ContextProvider } from \"./Context.js\";\r\n\r\ntoast.configure();\r\n\r\nconst App = () => {\r\n  const [projects, setProjects] = useState([]);\r\n  const [edit, setEdit] = useState(false);\r\n  const [selectedProject, setSelectedProject] = useState({});\r\n  const activeProjects = projects.filter(\r\n    (project) => project.active === true)\r\n    .length;\r\n  const archivedProjects = projects.filter(\r\n    (project) => project.active === false)\r\n    .length;\r\n\r\n  const setID = (id) => {\r\n\r\n  }\r\n\r\n  async function getProjects() {\r\n    const getProjects = await axios\r\n      .get(\"/fermentation/projects\", { withCredentials: true })\r\n      .then((response) => {\r\n        setProjects(response.data);\r\n      })\r\n      .catch((error) => console.log(error));\r\n  }\r\n\r\n  useEffect(() => {\r\n    getProjects();\r\n  }, []);\r\n\r\n  return (\r\n    <Router>\r\n      <ContextProvider value={{ projects, setProjects, setEdit }}>\r\n        <Navbar bg=\"light\" expand=\"lg\">\r\n          <Navbar.Brand>Fermentation Tracker</Navbar.Brand>\r\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n          <Navbar.Collapse id=\"basic-navbar-nav\">\r\n            <Nav>\r\n              <Nav.Link href=\"/\">Home</Nav.Link>\r\n              <Nav.Link href=\"/projectForm\">Project Form</Nav.Link>\r\n              <Nav.Link href=\"/active\">\r\n                {activeProjects} Active Project{activeProjects === 1 ? \"\" : \"s\"}\r\n              </Nav.Link>\r\n              <Nav.Link href=\"/archive\">\r\n                {archivedProjects} Archived Project\r\n                {archivedProjects === 1 ? \"\" : \"s\"}\r\n              </Nav.Link>\r\n            </Nav>\r\n          </Navbar.Collapse>\r\n        </Navbar>\r\n\r\n        <Switch>\r\n          <Route exact path=\"/\" component={() => <LandingPage />} />\r\n          <Route\r\n            exact\r\n            path=\"/projectForm\"\r\n            component={() => (\r\n              <ProjectForm edit={edit} selectedProject={selectedProject} />\r\n            )}\r\n          />\r\n          <Route\r\n            exact\r\n            path=\"/active\"\r\n            component={() => (\r\n              <ProjectDisplay\r\n                setSelectedProject={setSelectedProject}\r\n                projectState={true}\r\n              />\r\n            )}\r\n          />\r\n          <Route\r\n            exact\r\n            path=\"/archive\"\r\n            component={() => <ProjectDisplay projectState={false} />}\r\n          />\r\n        </Switch>\r\n      </ContextProvider>\r\n    </Router>\r\n  );\r\n};\r\n\r\nconst ProjectForm = ({ edit, selectedProject }) => {\r\n  const context = useContext(ContextConsumer);\r\n  const [projects, setProjects, setEdit] = [\r\n    context.projects,\r\n    context.setProjects,\r\n    context.setEdit,\r\n  ];\r\n  const [projectName, setProjectName] = useState(null);\r\n  const [description, setDescription] = useState(null);\r\n  const [weight, setWeight] = useState(null);\r\n  const [saltPercentage, setSaltPercentage] = useState(null);\r\n  const [saltWeight, setSaltWeight] = useState(null);\r\n  const [time, setTime] = useState(null);\r\n  const [notes, setNotes] = useState(null);\r\n  const [projectId, setProjectId] = useState(null);\r\n  const [submitted, setSubmitted] = useState(false);\r\n\r\n  // validate form inputs\r\n  const validateForm = () => {\r\n    if (\r\n      projectName !== null &&\r\n      description !== null &&\r\n      weight !== null &&\r\n      saltPercentage !== null &&\r\n      time !== null\r\n    ) {\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  // build project object if validation sucessful\r\n  const buildProject = () => {\r\n    if (validateForm() === true) {\r\n      const newProject = {\r\n        projectName: projectName,\r\n        description: description,\r\n        weight: weight,\r\n        saltPercentage: saltPercentage,\r\n        saltWeight: saltWeight,\r\n        time: time,\r\n        active: true,\r\n        notes: notes,\r\n      };\r\n      return { built: true, newProject: newProject };\r\n    } else {\r\n      window.alert(\"Please fill out all of the fields!\");\r\n      return { built: false };\r\n    }\r\n  };\r\n\r\n  // handle form button submitting new project\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setSubmitted(true);\r\n    const project = buildProject();\r\n\r\n    if (project.built) {\r\n      addProject(project.newProject).then((response) =>\r\n        setProjects([...projects, response])\r\n      );\r\n\r\n      toast.success(\"Project Added!\", {\r\n        position: \"bottom-center\",\r\n        autoClose: 3000,\r\n        hideProgressBar: true,\r\n        closeOnClick: true,\r\n        pauseOnHover: false,\r\n        draggable: false,\r\n        progress: undefined,\r\n      });\r\n\r\n      handleReset();\r\n    }\r\n  };\r\n\r\n  // handle submit button click in edit state\r\n  const handleEdit = async (e) => {\r\n    e.preventDefault();\r\n    const update = buildProject();\r\n\r\n    if (update.built) {\r\n      updateProject(projectId, update.newProject).then(\r\n        (id) => (update.newProject._id = id)\r\n      );\r\n\r\n      const index = projects.findIndex((project) => project._id === projectId);\r\n      const updateLocal = [...projects];\r\n      updateLocal.splice(index, 1, update.newProject);\r\n      setProjects(updateLocal);\r\n\r\n      handleReset();\r\n\r\n      toast.success(\"Project Updated!\", {\r\n        position: \"bottom-center\",\r\n        autoClose: 3000,\r\n        hideProgressBar: true,\r\n        closeOnClick: true,\r\n        pauseOnHover: false,\r\n        draggable: false,\r\n        progress: undefined,\r\n      });\r\n    }\r\n  };\r\n\r\n  // handle canceling edits click\r\n  const handleCancel = () => {\r\n    handleReset();\r\n\r\n    toast.warning(\"Updates Canceled!\", {\r\n      position: \"bottom-center\",\r\n      autoClose: 3000,\r\n      hideProgressBar: true,\r\n      closeOnClick: true,\r\n      pauseOnHover: false,\r\n      draggable: false,\r\n      progress: undefined,\r\n    });\r\n  };\r\n\r\n  // reset form and states to default\r\n  const handleReset = () => {\r\n    setSubmitted(false);\r\n    setEdit(false);\r\n    setProjectName(null);\r\n    setDescription(null);\r\n    setWeight(null);\r\n    setSaltPercentage(null);\r\n    setTime(null);\r\n    setNotes(null);\r\n    setProjectId(null);\r\n  };\r\n\r\n  // post new project\r\n  const addProject = async (newProject) => {\r\n    let addedProject;\r\n\r\n    await axios\r\n      .post(\"/fermentation/projects\", newProject)\r\n      .then((response) => {\r\n        addedProject = response.data.addedProject;\r\n      })\r\n      .catch((error) => console.log(error));\r\n\r\n    return addedProject;\r\n  };\r\n\r\n  // post edits to existing project\r\n  const updateProject = async (idToUpdate, updatedProject) => {\r\n    let updatedID;\r\n\r\n    await axios\r\n      .patch(\"/fermentation/projects/update\", {\r\n        id: idToUpdate,\r\n        project: updatedProject,\r\n      })\r\n      .then((response) => (updatedID = response.data.id))\r\n      .catch((error) => console.log(error));\r\n\r\n    return updatedID;\r\n  };\r\n\r\n  // fill form to with project details\r\n  const setFormToEdit = () => {\r\n    if (edit) {\r\n      setProjectName(selectedProject.projectName);\r\n      setDescription(selectedProject.description);\r\n      setWeight(selectedProject.weight);\r\n      setSaltPercentage(selectedProject.saltPercentage);\r\n      setTime(selectedProject.time);\r\n      setNotes(selectedProject.notes);\r\n      setProjectId(selectedProject._id);\r\n    }\r\n  };\r\n\r\n  const saltTotal = () => {\r\n    setSaltWeight((weight * (saltPercentage / 100)).toFixed(2));\r\n  };\r\n\r\n  useEffect(() => {\r\n    saltTotal();\r\n  }, [weight, saltPercentage]);\r\n\r\n  useEffect(() => {\r\n    setFormToEdit();\r\n  }, [edit]);\r\n\r\n  return (\r\n    <div className=\"section\">\r\n      <div className=\"box\">\r\n        <Form id=\"form\">\r\n          <Form.Label className=\"label\">Fermentation Tracker</Form.Label>\r\n          <Row className=\"mt-2\">\r\n            <Col>\r\n              <FormInput\r\n                for=\"project\"\r\n                type=\"text\"\r\n                title=\"Project Name\"\r\n                onChange={setProjectName}\r\n                errorPresent={submitted && projectName === null}\r\n                value={projectName}\r\n              />\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"mt-2\">\r\n            <Col>\r\n              <FormInput\r\n                for=\"description\"\r\n                type=\"text\"\r\n                title=\"Description\"\r\n                onChange={setDescription}\r\n                errorPresent={submitted && description === null}\r\n                value={description}\r\n              />\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"mt-2\">\r\n            <Col>\r\n              <FormInput\r\n                for=\"weight\"\r\n                type=\"number\"\r\n                title=\"Dry Weight of Ferment (g)\"\r\n                onChange={setWeight}\r\n                errorPresent={submitted && weight === null}\r\n                value={weight}\r\n              />\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"mt-2\">\r\n            <Col>\r\n              <FormInput\r\n                for=\"salt\"\r\n                type=\"number\"\r\n                title=\"Salt %\"\r\n                onChange={setSaltPercentage}\r\n                errorPresent={submitted && saltPercentage === null}\r\n                value={saltPercentage}\r\n              />\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <label>Calculated Salt Weight (g)</label>\r\n              <FormInput\r\n                for=\"saltWeight\"\r\n                type=\"number\"\r\n                title=\"Salt Weight (g)\"\r\n                value={saltWeight}\r\n                readOnly={true}\r\n              />\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <label>Complete on</label>\r\n              <FormInput\r\n                for=\"time\"\r\n                type=\"date\"\r\n                title=\"Complete on\"\r\n                onChange={setTime}\r\n                errorPresent={submitted && time === null}\r\n                value={time}\r\n              />\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <label>Additional Notes?</label>\r\n              <br />\r\n              <NotesInput\r\n                for=\"notes\"\r\n                type=\"text\"\r\n                title=\"Additional notes\"\r\n                onChange={setNotes}\r\n                value={notes}\r\n              />\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <Button\r\n                className=\"ut-btn\"\r\n                type=\"submit\"\r\n                id=\"formButton\"\r\n                onClick={(e) => {\r\n                  if (edit) {\r\n                    handleEdit(e);\r\n                  } else {\r\n                    handleSubmit(e);\r\n                  }\r\n                }}\r\n              >\r\n                {edit ? \"Submit Edits\" : \"Submit\"}\r\n              </Button>\r\n            </Col>\r\n            <Col>\r\n              {edit ? (\r\n                <Button\r\n                  className=\"ut-btn\"\r\n                  variant=\"danger\"\r\n                  size=\"lg\"\r\n                  onClick={() => handleCancel()}\r\n                >\r\n                  Cancel changes\r\n                </Button>\r\n              ) : (\r\n                <Button\r\n                  className=\"ut-btn\"\r\n                  variant=\"danger\"\r\n                  size=\"lg\"\r\n                  onClick={() => handleReset()}\r\n                >\r\n                  Clear Form\r\n                </Button>\r\n              )}\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n",["64","65"],"C:\\Users\\aaron\\Desktop\\fermentationtracker\\src\\inputs\\FormInput.js",[],["66","67"],"C:\\Users\\aaron\\Desktop\\fermentationtracker\\src\\inputs\\NotesInput.js",[],"C:\\Users\\aaron\\Desktop\\fermentationtracker\\src\\Context.js",[],"C:\\Users\\aaron\\Desktop\\fermentationtracker\\src\\subcomponents\\projectDisplay.js",["68","69","70"],"C:\\Users\\aaron\\Desktop\\fermentationtracker\\src\\subcomponents\\LandingPage.js",[],"C:\\Users\\aaron\\Desktop\\fermentationtracker\\src\\subcomponents\\ProjectDisplay.js",["71","72","73"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { Container, Button, Row, Col, Card } from \"react-bootstrap\";\r\nimport { ContextConsumer } from \"../Context.js\";\r\nimport axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { compareDesc, format, parseISO } from \"date-fns\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"../css/projectDisplay.css\";\r\n\r\nconst ProjectDisplay = ({ projectState, setSelectedProject }) => {\r\n  const context = useContext(ContextConsumer);\r\n  const [projects, setProjects, setEdit] = [\r\n    context.projects,\r\n    context.setProjects,\r\n    context.setEdit,\r\n  ];\r\n  const filter = projects.filter((project) => project.active === projectState);\r\n\r\n  // sets project status to complete\r\n  const handleStatusChange = (e) => {\r\n    const confirm = window.confirm(\"Mark project as completed?\");\r\n    if (confirm === true) {\r\n      const setStatus = axios\r\n        .patch(\"/fermentation/projects\", { id: e.target.id })\r\n        .then((response) => console.log(response))\r\n        .catch((error) => console.log(error));\r\n\r\n      const index = projects.findIndex(\r\n        (project) => project._id === e.target.id\r\n      );\r\n      projects[index].active = false;\r\n\r\n      setProjects([...projects]);\r\n\r\n      toast.success(\"Project moved to archive!\", {\r\n        position: \"bottom-center\",\r\n        autoClose: 4000,\r\n        hideProgressBar: true,\r\n        closeOnClick: true,\r\n        pauseOnHover: false,\r\n        draggable: false,\r\n        progress: undefined,\r\n      });\r\n    }\r\n  };\r\n\r\n  // Set form to edit\r\n  const handleEditClick = (project) => {\r\n    setSelectedProject(project);\r\n    setEdit(true);\r\n  };\r\n\r\n  // deletes project from database\r\n  const handleDelete = (e) => {\r\n    const confirm = window.confirm(\r\n      \"Are you sure you want to delete this project?\"\r\n    );\r\n    if (confirm === true) {\r\n      const deleteProject = axios\r\n        .delete(\"/fermentation/projects\", { data: { id: e.target.id } })\r\n        .then((response) => console.log(response))\r\n        .catch((error) => console.log(error));\r\n\r\n      const updatedProjects = projects.filter(\r\n        (project) => project._id !== e.target.id\r\n      );\r\n      setProjects(updatedProjects);\r\n\r\n      toast.success(\"Project Deleted!\", {\r\n        position: \"bottom-center\",\r\n        autoClose: 3000,\r\n        hideProgressBar: true,\r\n        closeOnClick: true,\r\n        pauseOnHover: false,\r\n        draggable: false,\r\n        progress: undefined,\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container style={{ height: \"100rem\" }}>\r\n      <Row>\r\n        {filter.length === 0 ? (\r\n          <Col className=\"d-flex justify-content-center\">\r\n            <EmptyCard projectState={projectState} />\r\n          </Col>\r\n        ) : (\r\n          filter.map((project) => {\r\n            return (\r\n              <ProjectCard\r\n                project={project}\r\n                handleStatusChange={handleStatusChange}\r\n                handleDelete={handleDelete}\r\n                handleEditClick={handleEditClick}\r\n              />\r\n            );\r\n          })\r\n        )}\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nconst ProjectCard = ({\r\n  project,\r\n  handleStatusChange,\r\n  handleDelete,\r\n  handleEditClick,\r\n}) => {\r\n  const [pastDue, setPastDue] = useState(false);\r\n\r\n  // check to see if before or after due date\r\n  const checkDate = (projectDate) => {\r\n    const today = format(new Date(), \"yyyy-MM-dd\");\r\n    const projectDue = format(parseISO(projectDate), \"yyyy-MM-dd\");\r\n\r\n    if (compareDesc(parseISO(today), parseISO(projectDue)) < 0) {\r\n      setPastDue(true);\r\n    }\r\n  };\r\n\r\n  // set pastDue state on component mount\r\n  useEffect(() => {\r\n    checkDate(project.time);\r\n  }, []);\r\n\r\n  return (\r\n    <Col className=\"project-col\">\r\n      <Card key={project._id}>\r\n        <Card.Header>\r\n          {pastDue && project.active ? (\r\n            <i\r\n              className=\"fas fa-exclamation mr-4 mt-1\"\r\n              style={{ color: \"red\", fontSize: \"1.5rem\" }}\r\n              title=\"This project is past due!\"\r\n            />\r\n          ) : null}\r\n          <Card.Title className=\"mt-1\">{project.projectName}</Card.Title>\r\n        </Card.Header>\r\n\r\n        <Card.Body>\r\n          <Card.Text className=\"text-left\">\r\n            <strong>Description:</strong> {project.description} <br />\r\n            <strong>Total Dry Weight (g):</strong> {project.weight} g <br />\r\n            <strong>Salt Percentage:</strong> {project.saltPercentage}% <br />\r\n            <strong>Total Salt:</strong> {project.saltWeight} g <br />\r\n            {project.active ? (\r\n              <div>\r\n                <strong>Complete on:</strong> {project.time}\r\n                <br />\r\n              </div>\r\n            ) : (\r\n              <div>\r\n                <strong>Completed on:</strong> {project.time}\r\n                <br />\r\n              </div>\r\n            )}\r\n            <strong>Notes:</strong>\r\n            <br /> {project.notes === \"\" ? \"N/A\" : project.notes}\r\n          </Card.Text>\r\n          <Row className=\"mt-4 btn-row\">\r\n            <Col className=\"btn-col\">\r\n              {project.active ? (\r\n                <Button\r\n                  className=\"ut-btn\"\r\n                  onClick={handleStatusChange}\r\n                  id={project._id}\r\n                >\r\n                  Complete Project\r\n                </Button>\r\n              ) : null}\r\n            </Col>\r\n            <Col className=\"btn-col\">\r\n              <Button\r\n                variant=\"danger\"\r\n                className=\"ut-btn\"\r\n                onClick={handleDelete}\r\n                id={project._id}\r\n              >\r\n                Delete Project\r\n              </Button>\r\n            </Col>\r\n            <Col className=\"btn-col\">\r\n              {project.active ? (\r\n                <Link to=\"/projectForm\">\r\n                  <Button\r\n                    variant=\"warning\"\r\n                    className=\"ut-btn\"\r\n                    onClick={() => handleEditClick(project)}\r\n                    id={project._id}\r\n                  >\r\n                    Edit Project\r\n                  </Button>\r\n                </Link>\r\n              ) : null}\r\n            </Col>\r\n          </Row>\r\n        </Card.Body>\r\n      </Card>\r\n    </Col>\r\n  );\r\n};\r\n\r\nconst EmptyCard = ({ projectState }) => {\r\n  return (\r\n    <Card id=\"empty-card\">\r\n      <Card.Header className=\"empty-header\">\r\n        <Card.Title className=\"mt-2\">\r\n          You haven't {projectState ? \"added\" : \"archived\"} any projects yet!\r\n        </Card.Title>\r\n      </Card.Header>\r\n      <Card.Body>\r\n        <Card.Text>\r\n          This page will contain projects{\" \"}\r\n          {projectState\r\n            ? \"you're currently working on!\"\r\n            : \"you've completed and archived!\"}\r\n          . <br></br>\r\n          {projectState\r\n            ? \"You can start tracking projects by filling out the form!\"\r\n            : \"You can complete and archive a project in the active projects screen!\"}\r\n        </Card.Text>\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default ProjectDisplay;\r\n","C:\\Users\\aaron\\desktop\\fermentationtracker\\src\\index.js",["74","75","76","77"],"C:\\Users\\aaron\\desktop\\fermentationtracker\\src\\Context.js",[],"C:\\Users\\aaron\\desktop\\fermentationtracker\\src\\subcomponents\\LandingPage.js",[],"C:\\Users\\aaron\\desktop\\fermentationtracker\\src\\subcomponents\\ProjectDisplay.js",["78","79","80"],"C:\\Users\\aaron\\desktop\\fermentationtracker\\src\\inputs\\NotesInput.js",[],"C:\\Users\\aaron\\desktop\\fermentationtracker\\src\\inputs\\FormInput.js",[],{"ruleId":"81","severity":1,"message":"82","line":28,"column":9,"nodeType":"83","messageId":"84","endLine":28,"endColumn":14},{"ruleId":"81","severity":1,"message":"85","line":33,"column":11,"nodeType":"83","messageId":"84","endLine":33,"endColumn":22},{"ruleId":"86","severity":1,"message":"87","line":277,"column":6,"nodeType":"88","endLine":277,"endColumn":30,"suggestions":"89"},{"ruleId":"86","severity":1,"message":"90","line":281,"column":6,"nodeType":"88","endLine":281,"endColumn":12,"suggestions":"91"},{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"92","replacedBy":"96"},{"ruleId":"94","replacedBy":"97"},{"ruleId":"81","severity":1,"message":"98","line":19,"column":15,"nodeType":"83","messageId":"84","endLine":19,"endColumn":24},{"ruleId":"81","severity":1,"message":"99","line":51,"column":17,"nodeType":"83","messageId":"84","endLine":51,"endColumn":30},{"ruleId":"86","severity":1,"message":"100","line":102,"column":48,"nodeType":"88","endLine":102,"endColumn":50,"suggestions":"101"},{"ruleId":"81","severity":1,"message":"98","line":23,"column":13,"nodeType":"83","messageId":"84","endLine":23,"endColumn":22},{"ruleId":"81","severity":1,"message":"99","line":59,"column":13,"nodeType":"83","messageId":"84","endLine":59,"endColumn":26},{"ruleId":"86","severity":1,"message":"100","line":126,"column":6,"nodeType":"88","endLine":126,"endColumn":8,"suggestions":"102"},{"ruleId":"81","severity":1,"message":"85","line":36,"column":11,"nodeType":"83","messageId":"84","endLine":36,"endColumn":22},{"ruleId":"86","severity":1,"message":"103","line":50,"column":6,"nodeType":"88","endLine":50,"endColumn":8,"suggestions":"104"},{"ruleId":"86","severity":1,"message":"87","line":286,"column":6,"nodeType":"88","endLine":286,"endColumn":30,"suggestions":"105"},{"ruleId":"86","severity":1,"message":"90","line":290,"column":6,"nodeType":"88","endLine":290,"endColumn":12,"suggestions":"106"},{"ruleId":"81","severity":1,"message":"98","line":23,"column":13,"nodeType":"83","messageId":"84","endLine":23,"endColumn":22},{"ruleId":"81","severity":1,"message":"99","line":59,"column":13,"nodeType":"83","messageId":"84","endLine":59,"endColumn":26},{"ruleId":"86","severity":1,"message":"100","line":126,"column":6,"nodeType":"88","endLine":126,"endColumn":8,"suggestions":"107"},"no-unused-vars","'setID' is assigned a value but never used.","Identifier","unusedVar","'getProjects' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'saltTotal'. Either include it or remove the dependency array.","ArrayExpression",["108"],"React Hook useEffect has a missing dependency: 'setFormToEdit'. Either include it or remove the dependency array.",["109"],"no-native-reassign",["110"],"no-negated-in-lhs",["111"],["110"],["111"],"'setStatus' is assigned a value but never used.","'deleteProject' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'project.time'. Either include it or remove the dependency array.",["112"],["113"],"React Hook useEffect has a missing dependency: 'getProjects'. Either include it or remove the dependency array.",["114"],["115"],["116"],["117"],{"desc":"118","fix":"119"},{"desc":"120","fix":"121"},"no-global-assign","no-unsafe-negation",{"desc":"122","fix":"123"},{"desc":"122","fix":"124"},{"desc":"125","fix":"126"},{"desc":"118","fix":"127"},{"desc":"120","fix":"128"},{"desc":"122","fix":"129"},"Update the dependencies array to be: [weight, saltPercentage, saltTotal]",{"range":"130","text":"131"},"Update the dependencies array to be: [edit, setFormToEdit]",{"range":"132","text":"133"},"Update the dependencies array to be: [project.time]",{"range":"134","text":"135"},{"range":"136","text":"135"},"Update the dependencies array to be: [getProjects]",{"range":"137","text":"138"},{"range":"139","text":"131"},{"range":"140","text":"133"},{"range":"141","text":"135"},[7984,8008],"[weight, saltPercentage, saltTotal]",[8062,8068],"[edit, setFormToEdit]",[3694,3696],"[project.time]",[3719,3721],[1650,1652],"[getProjects]",[8300,8324],[8378,8384],[3719,3721]]