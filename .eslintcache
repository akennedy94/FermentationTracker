[{"C:\\Users\\aaron\\Desktop\\fermentationtracker\\src\\index.js":"1","C:\\Users\\aaron\\Desktop\\fermentationtracker\\src\\inputs\\FormInput.js":"2","C:\\Users\\aaron\\Desktop\\fermentationtracker\\src\\inputs\\NotesInput.js":"3","C:\\Users\\aaron\\Desktop\\fermentationtracker\\src\\Context.js":"4","C:\\Users\\aaron\\Desktop\\fermentationtracker\\src\\subcomponents\\projectDisplay.js":"5","C:\\Users\\aaron\\Desktop\\fermentationtracker\\src\\subcomponents\\LandingPage.js":"6","C:\\Users\\aaron\\Desktop\\fermentationtracker\\src\\subcomponents\\ProjectDisplay.js":"7"},{"size":11597,"mtime":1615918876525,"results":"8","hashOfConfig":"9"},{"size":716,"mtime":1615918876584,"results":"10","hashOfConfig":"9"},{"size":355,"mtime":1615918876605,"results":"11","hashOfConfig":"9"},{"size":193,"mtime":1615918876274,"results":"12","hashOfConfig":"9"},{"size":6817,"mtime":1614018867958,"results":"13","hashOfConfig":"14"},{"size":1313,"mtime":1615918876646,"results":"15","hashOfConfig":"9"},{"size":6838,"mtime":1615999551173,"results":"16","hashOfConfig":"9"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"20"},"az59rb",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"qczz1n",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\aaron\\Desktop\\fermentationtracker\\src\\index.js",["33","34","35"],"import React, { useState, useEffect, useContext } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport FormInput from \"./inputs/FormInput\";\nimport NotesInput from \"./inputs/NotesInput\";\nimport ProjectDisplay from \"./subcomponents/ProjectDisplay.js\";\nimport LandingPage from \"./subcomponents/LandingPage.js\";\nimport axios from \"axios\";\nimport { Form, Button, Row, Col, Navbar, Nav } from \"react-bootstrap\";\nimport { toast } from \"react-toastify\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport \"./css/index.css\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { ContextConsumer, ContextProvider } from \"./Context.js\";\n\ntoast.configure();\n\nconst App = () => {\n  const [projects, setProjects] = useState([]);\n  const [edit, setEdit] = useState(false);\n  const [selectedProject, setSelectedProject] = useState({});\n  const activeProjects = projects.filter((project) => project.active === true)\n    .length;\n  const archivedProjects = projects.filter(\n    (project) => project.active === false\n  ).length;\n\n  async function getProjects() {\n    const getProjects = await axios\n      .get(\"/fermentation/projects\")\n      .then((response) => {\n        setProjects(response.data);\n      })\n      .catch((error) => console.log(error));\n  }\n\n  useEffect(() => {\n    getProjects();\n  }, []);\n\n  return (\n    <Router>\n      <ContextProvider value={{ projects, setProjects, setEdit }}>\n        <Navbar bg=\"light\" expand=\"lg\">\n          <Navbar.Brand>Fermentation Tracker</Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n          <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Nav>\n              <Nav.Link href=\"/\">Home</Nav.Link>\n              <Nav.Link href=\"/projectForm\">Project Form</Nav.Link>\n              <Nav.Link href=\"/active\">\n                {activeProjects} Active Project{activeProjects === 1 ? \"\" : \"s\"}\n              </Nav.Link>\n              <Nav.Link href=\"/archive\">\n                {archivedProjects} Archived Project\n                {archivedProjects === 1 ? \"\" : \"s\"}\n              </Nav.Link>\n            </Nav>\n          </Navbar.Collapse>\n        </Navbar>\n\n        <Switch>\n          <Route exact path=\"/\" component={() => <LandingPage />} />\n          <Route\n            exact\n            path=\"/projectForm\"\n            component={() => (\n              <ProjectForm edit={edit} selectedProject={selectedProject} />\n            )}\n          />\n          <Route\n            exact\n            path=\"/active\"\n            component={() => (\n              <ProjectDisplay\n                setSelectedProject={setSelectedProject}\n                projectState={true}\n              />\n            )}\n          />\n          <Route\n            exact\n            path=\"/archive\"\n            component={() => <ProjectDisplay projectState={false} />}\n          />\n        </Switch>\n      </ContextProvider>\n    </Router>\n  );\n};\n\nconst ProjectForm = ({ edit, selectedProject }) => {\n  const context = useContext(ContextConsumer);\n  const [projects, setProjects, setEdit] = [\n    context.projects,\n    context.setProjects,\n    context.setEdit,\n  ];\n  const [projectName, setProjectName] = useState(null);\n  const [description, setDescription] = useState(null);\n  const [weight, setWeight] = useState(null);\n  const [saltPercentage, setSaltPercentage] = useState(null);\n  const [saltWeight, setSaltWeight] = useState(null);\n  const [time, setTime] = useState(null);\n  const [notes, setNotes] = useState(null);\n  const [projectId, setProjectId] = useState(null);\n  const [submitted, setSubmitted] = useState(false);\n\n  // validate form inputs\n  const validateForm = () => {\n    if (\n      projectName !== null &&\n      description !== null &&\n      weight !== null &&\n      saltPercentage !== null &&\n      time !== null\n    ) {\n      return true;\n    }\n    return false;\n  };\n\n  // build project object if validation sucessful\n  const buildProject = () => {\n    if (validateForm() === true) {\n      const newProject = {\n        projectName: projectName,\n        description: description,\n        weight: weight,\n        saltPercentage: saltPercentage,\n        saltWeight: saltWeight,\n        time: time,\n        active: true,\n        notes: notes,\n      };\n      return { built: true, newProject: newProject };\n    } else {\n      window.alert(\"Please fill out all of the fields!\");\n      return { built: false };\n    }\n  };\n\n  // handle form button submitting new project\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setSubmitted(true);\n    const project = buildProject();\n\n    if (project.built) {\n      addProject(project.newProject).then((response) =>\n        setProjects([...projects, response])\n      );\n\n      toast.success(\"Project Added!\", {\n        position: \"bottom-center\",\n        autoClose: 3000,\n        hideProgressBar: true,\n        closeOnClick: true,\n        pauseOnHover: false,\n        draggable: false,\n        progress: undefined,\n      });\n\n      handleReset();\n    }\n  };\n\n  // handle submit button click in edit state\n  const handleEdit = async (e) => {\n    e.preventDefault();\n    const update = buildProject();\n\n    if (update.built) {\n      updateProject(projectId, update.newProject).then(\n        (id) => (update.newProject._id = id)\n      );\n\n      const index = projects.findIndex((project) => project._id === projectId);\n      const updateLocal = [...projects];\n      updateLocal.splice(index, 1, update.newProject);\n      setProjects(updateLocal);\n\n      handleReset();\n\n      toast.success(\"Project Updated!\", {\n        position: \"bottom-center\",\n        autoClose: 3000,\n        hideProgressBar: true,\n        closeOnClick: true,\n        pauseOnHover: false,\n        draggable: false,\n        progress: undefined,\n      });\n    }\n  };\n\n  // handle canceling edits click\n  const handleCancel = () => {\n    handleReset();\n\n    toast.warning(\"Updates Canceled!\", {\n      position: \"bottom-center\",\n      autoClose: 3000,\n      hideProgressBar: true,\n      closeOnClick: true,\n      pauseOnHover: false,\n      draggable: false,\n      progress: undefined,\n    });\n  };\n\n  // reset form and states to default\n  const handleReset = () => {\n    setSubmitted(false);\n    setEdit(false);\n    setProjectName(null);\n    setDescription(null);\n    setWeight(null);\n    setSaltPercentage(null);\n    setTime(null);\n    setNotes(null);\n    setProjectId(null);\n  };\n\n  // post new project\n  const addProject = async (newProject) => {\n    let addedProject;\n\n    await axios\n      .post(\"/fermentation/projects\", newProject)\n      .then((response) => {\n        addedProject = response.data.addedProject;\n      })\n      .catch((error) => console.log(error));\n\n    return addedProject;\n  };\n\n  // post edits to existing project\n  const updateProject = async (idToUpdate, updatedProject) => {\n    let updatedID;\n\n    await axios\n      .patch(\"/fermentation/projects/update\", {\n        id: idToUpdate,\n        project: updatedProject,\n      })\n      .then((response) => (updatedID = response.data.id))\n      .catch((error) => console.log(error));\n\n    return updatedID;\n  };\n\n  // fill form to with project details\n  const setFormToEdit = () => {\n    if (edit) {\n      setProjectName(selectedProject.projectName);\n      setDescription(selectedProject.description);\n      setWeight(selectedProject.weight);\n      setSaltPercentage(selectedProject.saltPercentage);\n      setTime(selectedProject.time);\n      setNotes(selectedProject.notes);\n      setProjectId(selectedProject._id);\n    }\n  };\n\n  const saltTotal = () => {\n    setSaltWeight((weight * (saltPercentage / 100)).toFixed(2));\n  };\n\n  useEffect(() => {\n    saltTotal();\n  }, [weight, saltPercentage]);\n\n  useEffect(() => {\n    setFormToEdit();\n  }, [edit]);\n\n  return (\n    <div className=\"section\">\n      <div className=\"box\">\n        <Form id=\"form\">\n          <Form.Label className=\"label\">Fermentation Tracker</Form.Label>\n          <Row className=\"mt-2\">\n            <Col>\n              <FormInput\n                for=\"project\"\n                type=\"text\"\n                title=\"Project Name\"\n                onChange={setProjectName}\n                errorPresent={submitted && projectName === null}\n                value={projectName}\n              />\n            </Col>\n          </Row>\n          <Row className=\"mt-2\">\n            <Col>\n              <FormInput\n                for=\"description\"\n                type=\"text\"\n                title=\"Description\"\n                onChange={setDescription}\n                errorPresent={submitted && description === null}\n                value={description}\n              />\n            </Col>\n          </Row>\n          <Row className=\"mt-2\">\n            <Col>\n              <FormInput\n                for=\"weight\"\n                type=\"number\"\n                title=\"Dry Weight of Ferment (g)\"\n                onChange={setWeight}\n                errorPresent={submitted && weight === null}\n                value={weight}\n              />\n            </Col>\n          </Row>\n          <Row className=\"mt-2\">\n            <Col>\n              <FormInput\n                for=\"salt\"\n                type=\"number\"\n                title=\"Salt %\"\n                onChange={setSaltPercentage}\n                errorPresent={submitted && saltPercentage === null}\n                value={saltPercentage}\n              />\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <label>Calculated Salt Weight (g)</label>\n              <FormInput\n                for=\"saltWeight\"\n                type=\"number\"\n                title=\"Salt Weight (g)\"\n                value={saltWeight}\n                readOnly={true}\n              />\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <label>Complete on</label>\n              <FormInput\n                for=\"time\"\n                type=\"date\"\n                title=\"Complete on\"\n                onChange={setTime}\n                errorPresent={submitted && time === null}\n                value={time}\n              />\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <label>Additional Notes?</label>\n              <br />\n              <NotesInput\n                for=\"notes\"\n                type=\"text\"\n                title=\"Additional notes\"\n                onChange={setNotes}\n                value={notes}\n              />\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <Button\n                className=\"ut-btn\"\n                type=\"submit\"\n                id=\"formButton\"\n                onClick={(e) => {\n                  if (edit) {\n                    handleEdit(e);\n                  } else {\n                    handleSubmit(e);\n                  }\n                }}\n              >\n                {edit ? \"Submit Edits\" : \"Submit\"}\n              </Button>\n            </Col>\n            <Col>\n              {edit ? (\n                <Button\n                  className=\"ut-btn\"\n                  variant=\"danger\"\n                  size=\"lg\"\n                  onClick={() => handleCancel()}\n                >\n                  Cancel changes\n                </Button>\n              ) : (\n                <Button\n                  className=\"ut-btn\"\n                  variant=\"danger\"\n                  size=\"lg\"\n                  onClick={() => handleReset()}\n                >\n                  Clear Form\n                </Button>\n              )}\n            </Col>\n          </Row>\n        </Form>\n      </div>\n    </div>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n",["36","37"],"C:\\Users\\aaron\\Desktop\\fermentationtracker\\src\\inputs\\FormInput.js",[],"C:\\Users\\aaron\\Desktop\\fermentationtracker\\src\\inputs\\NotesInput.js",[],"C:\\Users\\aaron\\Desktop\\fermentationtracker\\src\\Context.js",[],"C:\\Users\\aaron\\Desktop\\fermentationtracker\\src\\subcomponents\\projectDisplay.js",["38","39","40"],"C:\\Users\\aaron\\Desktop\\fermentationtracker\\src\\subcomponents\\LandingPage.js",[],"C:\\Users\\aaron\\Desktop\\fermentationtracker\\src\\subcomponents\\ProjectDisplay.js",["41","42","43"],{"ruleId":"44","severity":1,"message":"45","line":28,"column":11,"nodeType":"46","messageId":"47","endLine":28,"endColumn":22},{"ruleId":"48","severity":1,"message":"49","line":272,"column":6,"nodeType":"50","endLine":272,"endColumn":30,"suggestions":"51"},{"ruleId":"48","severity":1,"message":"52","line":276,"column":6,"nodeType":"50","endLine":276,"endColumn":12,"suggestions":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"44","severity":1,"message":"58","line":19,"column":15,"nodeType":"46","messageId":"47","endLine":19,"endColumn":24},{"ruleId":"44","severity":1,"message":"59","line":51,"column":17,"nodeType":"46","messageId":"47","endLine":51,"endColumn":30},{"ruleId":"48","severity":1,"message":"60","line":102,"column":48,"nodeType":"50","endLine":102,"endColumn":50,"suggestions":"61"},{"ruleId":"44","severity":1,"message":"58","line":23,"column":13,"nodeType":"46","messageId":"47","endLine":23,"endColumn":22},{"ruleId":"44","severity":1,"message":"59","line":59,"column":13,"nodeType":"46","messageId":"47","endLine":59,"endColumn":26},{"ruleId":"48","severity":1,"message":"60","line":126,"column":6,"nodeType":"50","endLine":126,"endColumn":8,"suggestions":"62"},"no-unused-vars","'getProjects' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'saltTotal'. Either include it or remove the dependency array.","ArrayExpression",["63"],"React Hook useEffect has a missing dependency: 'setFormToEdit'. Either include it or remove the dependency array.",["64"],"no-native-reassign",["65"],"no-negated-in-lhs",["66"],"'setStatus' is assigned a value but never used.","'deleteProject' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'project.time'. Either include it or remove the dependency array.",["67"],["68"],{"desc":"69","fix":"70"},{"desc":"71","fix":"72"},"no-global-assign","no-unsafe-negation",{"desc":"73","fix":"74"},{"desc":"73","fix":"75"},"Update the dependencies array to be: [weight, saltPercentage, saltTotal]",{"range":"76","text":"77"},"Update the dependencies array to be: [edit, setFormToEdit]",{"range":"78","text":"79"},"Update the dependencies array to be: [project.time]",{"range":"80","text":"81"},{"range":"82","text":"81"},[7642,7666],"[weight, saltPercentage, saltTotal]",[7716,7722],"[edit, setFormToEdit]",[3694,3696],"[project.time]",[3594,3596]]