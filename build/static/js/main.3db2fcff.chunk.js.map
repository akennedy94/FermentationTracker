{"version":3,"sources":["inputs/FormInput.js","inputs/NotesInput.js","index.js"],"names":["FormInput","props","className","type","id","for","name","title","onChange","event","parseInt","target","value","placeholder","required","readOnly","NotesInput","class","rows","App","useState","projects","setProjects","edit","setEdit","selectedProject","setSelectedProject","activeProjects","filter","project","active","length","archivedProjects","a","axios","get","then","response","data","catch","error","console","log","useEffect","getProjects","Navbar","bg","expand","Brand","Nav","Link","to","exact","path","component","ProjectForm","ProjectDisplay","projectState","projectName","setProjectName","description","setDescription","weight","setWeight","saltPercentage","setSaltPercentage","saltWeight","setSaltWeight","time","setTime","notes","setNotes","projectId","setProjectId","fields","element","document","getElementById","buildProject","formValid","forEach","field","classList","remove","add","validateForm","built","newProject","window","alert","handleSubmit","e","preventDefault","addProject","toast","success","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","handleReset","handleEdit","update","updateProject","_id","index","findIndex","updateLocal","splice","innerHTML","post","addedProject","idToUpdate","updatedProject","patch","updatedID","toFixed","Form","Label","Row","Col","Button","size","onClick","variant","warning","handleStatusChange","confirm","handleEditClick","handleDelete","delete","updatedProjects","Container","style","height","map","ReactDOM","render","configure","ProjectCard","pastDue","setPastDue","projectDate","today","format","Date","projectDue","parseISO","compareDesc","checkDate","Card","width","Header","color","fontSize","Title","Body","Text","EmptyCard"],"mappings":"mOAwBeA,EAxBG,SAACC,GACf,OACI,gCACI,uBACIC,UAAU,eACVC,KAAMF,EAAME,KACZC,GAAIH,EAAMI,IACVC,KAAML,EAAMM,MACZC,SAAU,SAACC,GACJC,SAASD,EAAME,OAAOC,QAAUF,SAASD,EAAME,OAAOC,OAAS,GAG9DX,EAAMO,SAASC,EAAME,OAAOC,QAGpCA,MAAOX,EAAMW,MACbC,YAAaZ,EAAMM,MACnBO,UAAQ,EACRC,WAAUd,EAAMc,UAAWd,EAAMc,WACnC,2BCJCC,EAfI,SAACf,GAChB,OACI,gCACI,0BACAgB,MAAM,eACNb,GAAIH,EAAMI,IACVa,KAAK,IACLV,SAAU,SAACC,GAAD,OAAWR,EAAMO,SAASC,EAAME,OAAOC,QACjDC,YAAaZ,EAAMM,MACnBK,MAAOX,EAAMW,MAAQX,EAAMW,MAAQ,OACjC,2B,4ICMd,SAASO,IAAO,IAAD,EACmBC,mBAAS,IAD5B,mBACNC,EADM,KACIC,EADJ,OAEWF,oBAAS,GAFpB,mBAENG,EAFM,KAEAC,EAFA,OAGiCJ,mBAAS,IAH1C,mBAGNK,EAHM,KAGWC,EAHX,KAIPC,EAAiBN,EAASO,QAAO,SAAAC,GAAO,OAAuB,IAAnBA,EAAQC,UAAiBC,OACrEC,EAAmBX,EAASO,QAAO,SAAAC,GAAO,OAAuB,IAAnBA,EAAQC,UAAkBC,OALjE,4CAOb,sBAAAE,EAAA,sEAC4BC,IAAMC,IAAI,0BACjCC,MAAK,SAAAC,GAAaf,EAAYe,EAASC,SACvCC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,MAHhC,0DAPa,sBAeb,OAFAG,qBAAU,YAbG,mCAaIC,KAAgB,IAG/B,eAAC,IAAD,WACE,eAACC,EAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,KAA1B,UACE,cAACF,EAAA,EAAOG,MAAR,mCACA,eAACC,EAAA,EAAD,CAAK/C,UAAU,UAAf,UACE,cAAC+C,EAAA,EAAIC,KAAL,UAAU,cAAC,IAAD,CAAMC,GAAG,IAAT,4BACV,cAACF,EAAA,EAAIC,KAAL,UAAU,eAAC,IAAD,CAAMC,GAAG,UAAT,UAAoBxB,EAApB,wBACV,cAACsB,EAAA,EAAIC,KAAL,UAAU,eAAC,IAAD,CAAMC,GAAG,WAAT,UAAqBnB,EAArB,gCAId,eAAC,IAAD,WACE,cAAC,IAAD,CAAOoB,OAAK,EAACC,KAAK,IAAIC,UAAW,kBAAM,cAACC,EAAD,CAAalC,SAAUA,EAAUC,YAAaA,EAAaE,QAASA,EAASD,KAAMA,EAAME,gBAAiBA,OACjJ,cAAC,IAAD,CAAO2B,OAAK,EAACC,KAAK,UAAUC,UAAW,kBAAM,cAACE,EAAD,CAAgBnC,SAAUA,EAAUC,YAAaA,EAAaE,QAASA,EAASE,mBAAoBA,EAAoB+B,cAAc,OACnL,cAAC,IAAD,CAAOL,OAAK,EAACC,KAAK,WAAWC,UAAW,kBAAM,cAACE,EAAD,CAAgBnC,SAAUA,EAAUC,YAAaA,EAAamC,cAAc,aAMlI,SAASF,EAAT,GAAkF,IAA1DlC,EAAyD,EAAzDA,SAAUC,EAA+C,EAA/CA,YAAaE,EAAkC,EAAlCA,QAASD,EAAyB,EAAzBA,KAAME,EAAmB,EAAnBA,gBAAmB,EACzCL,mBAAS,MADgC,mBACxEsC,EADwE,KAC3DC,EAD2D,OAEzCvC,mBAAS,MAFgC,mBAExEwC,EAFwE,KAE3DC,EAF2D,OAGnDzC,mBAAS,MAH0C,mBAGxE0C,EAHwE,KAGhEC,EAHgE,OAInC3C,mBAAS,MAJ0B,mBAIxE4C,EAJwE,KAIxDC,EAJwD,OAK3C7C,mBAAS,MALkC,mBAKxE8C,EALwE,KAK5DC,EAL4D,OAMvD/C,mBAAS,MAN8C,mBAMxEgD,EANwE,KAMlEC,EANkE,OAOrDjD,mBAAS,MAP4C,mBAOxEkD,EAPwE,KAOjEC,EAPiE,OAQ7CnD,mBAAS,MARoC,mBAQxEoD,EARwE,KAQ7DC,EAR6D,KASzEC,EAAS,CACb,CAACC,QAASC,SAASC,eAAe,YAClC,CAACF,QAASC,SAASC,eAAe,gBAClC,CAACF,QAASC,SAASC,eAAe,WAClC,CAACF,QAASC,SAASC,eAAe,SAClC,CAACF,QAASC,SAASC,eAAe,UAiC9BC,EAAe,WACnB,OAAuB,IA9BJ,WACnB,IAAIC,GAAY,EAwBhB,OAvBAL,EAAOM,SAAQ,SAAAC,GAAK,OAAIA,EAAMN,QAAQO,UAAUC,OAAO,iBAEnC,OAAhBzB,IACFgB,EAAO,GAAGC,QAAQO,UAAUE,IAAI,cAChCL,GAAY,GAEM,OAAhBnB,IACFc,EAAO,GAAGC,QAAQO,UAAUE,IAAI,cAChCL,GAAY,GAEC,OAAXjB,IACFY,EAAO,GAAGC,QAAQO,UAAUE,IAAI,cAChCL,GAAY,GAES,OAAnBf,IACFU,EAAO,GAAGC,QAAQO,UAAUE,IAAI,cAChCL,GAAY,GAED,OAATX,IACFM,EAAO,GAAGC,QAAQO,UAAUE,IAAI,cAChCL,GAAY,GAGPA,EAKHM,GAWK,CAACC,OAAO,EAAMC,WAVF,CACjB7B,YAAaA,EACbE,YAAaA,EACbE,OAAQA,EACRE,eAAgBA,EAChBE,WAAYA,EACZE,KAAMA,EACNtC,QAAQ,EACRwC,MAAOA,KAITkB,OAAOC,MAAM,sCACN,CAACH,OAAO,KAKbI,GAAY,uCAAG,WAAOC,GAAP,eAAA1D,EAAA,sDACnB0D,EAAEC,kBACI/D,EAAUiD,KAEJQ,QACVO,GAAWhE,EAAQ0D,YAChBnD,MAAK,SAAAC,GAAQ,OAAIf,EAAY,GAAD,mBAAKD,GAAL,CAAegB,QAE9CyD,IAAMC,QAAQ,iBAAkB,CAC9BC,SAAU,gBACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,IAGZC,MAlBiB,2CAAH,sDAuBZC,GAAU,uCAAG,WAAOd,GAAP,mBAAA1D,EAAA,sDACjB0D,EAAEC,iBACIc,EAAS5B,IACfrC,QAAQC,IAAI,uBAERgE,EAAOpB,QACTqB,GAAcnC,EAAWkC,EAAOnB,YAAYnD,MAAK,SAAAhC,GAAE,OAAIsG,EAAOnB,WAAWqB,IAAMxG,KAEzEyG,EAAQxF,EAASyF,WAAU,SAAAjF,GAAO,OAAIA,EAAQ+E,MAAQpC,MACtDuC,EAJS,YAIS1F,IACZ2F,OAAOH,EAAO,EAAGH,EAAOnB,YACpCjE,EAAYyF,GAEZP,KAEAV,IAAMC,QAAQ,mBAAoB,CAChCC,SAAU,gBACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,KAtBG,2CAAH,sDA2CVC,GAAc,WACdjF,IACaqD,SAASC,eAAe,cAChCoC,UAAY,UAGrBvC,EAAOM,SAAQ,SAAAC,GAAK,OAAIA,EAAMN,QAAQ/D,MAAM,MAC5C8D,EAAOM,SAAQ,SAAAC,GAAK,OAAIA,EAAMN,QAAQO,UAAUC,OAAO,iBAEvD3D,GAAQ,GACRmC,EAAe,MACfE,EAAe,MACfE,EAAU,MACVE,EAAkB,MAClBI,EAAQ,MACRE,EAAS,MACTE,EAAa,OAKToB,GAAU,uCAAG,WAAON,GAAP,eAAAtD,EAAA,sEAGXC,IAAMgF,KAAK,yBAA0B3B,GACxCnD,MAAK,SAAAC,GACJ8E,EAAe9E,EAASC,KAAK6E,gBAC5B5E,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,MANf,gCAQV2E,GARU,2CAAH,sDAYVR,GAAa,uCAAG,WAAOS,EAAYC,GAAnB,eAAApF,EAAA,sEAGdC,IAAMoF,MAAM,gCAAiC,CAAClH,GAAIgH,EAAYvF,QAASwF,IAC1EjF,MAAK,SAAAC,GAAQ,OAAIkF,EAAYlF,EAASC,KAAKlC,MAC3CmC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,MALV,gCAOb+E,GAPa,2CAAH,wDAkCnB,OAJA5E,qBAAU,WAHRwB,GAAeL,GAAUE,EAAiB,MAAMwD,QAAQ,MAG3B,CAAC1D,EAAQE,IAExCrB,qBAAU,WApBJpB,IACaqD,SAASC,eAAe,cAChCoC,UAAY,iBAEnBtD,EAAelC,EAAgBiC,aAC/BG,EAAepC,EAAgBmC,aAC/BG,EAAUtC,EAAgBqC,QAC1BG,EAAkBxC,EAAgBuC,gBAClCK,EAAQ5C,EAAgB2C,MACxBG,EAAS9C,EAAgB6C,OACzBG,EAAahD,EAAgBmF,QAUE,CAACrF,IAGlC,qBAAKrB,UAAU,UAAf,SACI,qBAAKA,UAAU,MAAf,SACE,eAACuH,EAAA,EAAD,CAAMrH,GAAG,OAAT,UACE,cAACqH,EAAA,EAAKC,MAAN,CAAYxH,UAAU,QAAtB,kCACE,cAACyH,EAAA,EAAD,CAAKzH,UAAU,OAAf,SACE,cAAC0H,EAAA,EAAD,UACE,cAAC,EAAD,CAAWvH,IAAI,UAAUF,KAAK,OAAOI,MAAM,eAAeC,SAAUmD,EAAgB/C,MAAO8C,QAG/F,cAACiE,EAAA,EAAD,CAAKzH,UAAU,OAAf,SACE,cAAC0H,EAAA,EAAD,UACE,cAAC,EAAD,CAAWvH,IAAI,cAAcF,KAAK,OAAOI,MAAM,cAAcC,SAAUqD,EAAgBjD,MAAOgD,QAGlG,cAAC+D,EAAA,EAAD,CAAKzH,UAAU,OAAf,SACE,cAAC0H,EAAA,EAAD,UACE,cAAC,EAAD,CAAWvH,IAAI,SAASF,KAAK,SAASI,MAAM,4BAA4BC,SAAUuD,EAAWnD,MAAOkD,QAGxG,cAAC6D,EAAA,EAAD,CAAKzH,UAAU,OAAf,SACE,cAAC0H,EAAA,EAAD,UACE,cAAC,EAAD,CAAWvH,IAAI,OAAOF,KAAK,SAASI,MAAM,SAASC,SAAUyD,EAAmBrD,MAAOoD,QAG3F,cAAC2D,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,+DACA,cAAC,EAAD,CAAWvH,IAAI,aAAaF,KAAK,SAASI,MAAM,kBAAkBK,MAAOsD,EAAYnD,UAAU,SAGnG,cAAC4G,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,gDACA,cAAC,EAAD,CAAWvH,IAAI,OAAOF,KAAK,OAAOI,MAAM,cAAcC,SAAU6D,EAASzD,MAAOwD,SAGpF,cAACuD,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,sDAAgC,uBAChC,cAAC,EAAD,CAAYvH,IAAI,QAAQF,KAAK,OAAOI,MAAM,mBAAmBC,SAAU+D,EAAU3D,MAAO0D,SAG5F,eAACqD,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CACEC,KAAK,KACL3H,KAAK,SACLC,GAAG,aACH2H,QAAS,SAACpC,GACJpE,EACFkF,GAAWd,GAEXD,GAAaC,IARnB,sBAYF,cAACiC,EAAA,EAAD,UACGrG,EAAO,cAACsG,EAAA,EAAD,CAAQG,QAAQ,SAASF,KAAK,KAAKC,QAAS,kBA3IlEvB,UAEAV,IAAMmC,QAAQ,oBAAqB,CACjCjC,SAAU,gBACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,KAkIU,4BAER,cAACsB,EAAA,EAAD,CAAQG,QAAQ,SAASF,KAAK,KAAKC,QAAS,kBAAMvB,MAAlD,oCASlB,SAAShD,EAAT,GAAgG,IAArEnC,EAAoE,EAApEA,SAAUC,EAA0D,EAA1DA,YAAamC,EAA6C,EAA7CA,aAAcjC,EAA+B,EAA/BA,QAASE,EAAsB,EAAtBA,mBAEjEE,EAASP,EAASO,QAAO,SAAAC,GAAO,OAAIA,EAAQC,SAAW2B,KAGvDyE,EAAqB,SAACvC,GAE1B,IAAgB,IADAH,OAAO2C,QAAQ,8BACT,CACFjG,IAAMoF,MAAM,yBAA0B,CAAClH,GAAIuF,EAAEhF,OAAOP,KACnEgC,MAAK,SAAAC,GAAQ,OAAII,QAAQC,IAAIL,MAC7BE,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,MAF9B,IAIMqE,EAAQxF,EAASyF,WAAU,SAAAjF,GAAO,OAAIA,EAAQ+E,MAAQjB,EAAEhF,OAAOP,MACrEiB,EAASwF,GAAO/E,QAAS,EAEzBR,EAAY,YAAID,IAEhByE,IAAMC,QAAQ,4BAA6B,CACzCC,SAAU,gBACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,MAOV6B,EAAkB,SAACvG,GACvBH,EAAmBG,GACnBL,GAAQ,IAIJ6G,EAAe,SAAC1C,GAElB,IAAgB,IADFH,OAAO2C,QAAQ,iDACP,CACEjG,IAAMoG,OAAO,yBAA0B,CAAChG,KAAM,CAAClC,GAAIuF,EAAEhF,OAAOP,MAC/EgC,MAAK,SAAAC,GAAQ,OAAII,QAAQC,IAAIL,MAC7BE,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,MAF9B,IAIM+F,EAAkBlH,EAASO,QAAO,SAAAC,GAAO,OAAIA,EAAQ+E,MAAQjB,EAAEhF,OAAOP,MAC5EkB,EAAYiH,GAEZzC,IAAMC,QAAQ,mBAAoB,CAChCC,SAAU,gBACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,MAKlB,OACE,cAACiC,EAAA,EAAD,CAAWC,MAAO,CAACC,OAAQ,UAA3B,SACE,cAACf,EAAA,EAAD,UAEsB,IAAlB/F,EAAOG,OACL,cAAC6F,EAAA,EAAD,CAAK1H,UAAU,gCAAf,SACE,cAAC,EAAD,CAAWuD,aAAcA,MAG7B7B,EAAO+G,KAAI,SAAA9G,GACT,OAAO,cAAC,EAAD,CAAaA,QAASA,EAASqG,mBAAoBA,EAAoBG,aAAcA,EAAcD,gBAAiBA,WAzXvIQ,IAASC,OAAO,cAAC1H,EAAD,IAASyD,SAASC,eAAe,SAEjDiB,IAAMgD,YA+XN,IAAMC,EAAc,SAAC,GAAkE,IAAjElH,EAAgE,EAAhEA,QAASqG,EAAuD,EAAvDA,mBAAoBG,EAAmC,EAAnCA,aAAcD,EAAqB,EAArBA,gBAAqB,EACtDhH,oBAAS,GAD6C,mBAC7E4H,EAD6E,KACpEC,EADoE,KAgBpF,OAFAtG,qBAAU,YAVQ,SAACuG,GACjB,IAAMC,EAAQC,YAAO,IAAIC,KAAQ,cAC3BC,EAAaF,YAAOG,YAASL,GAAc,cAE7CM,YAAYD,YAASJ,GAAQI,YAASD,IAAe,GACvDL,GAAW,GAKEQ,CAAU5H,EAAQuC,QAAQ,IAGvC,eAACsF,EAAA,EAAD,CAAwBxJ,UAAU,YAAYuI,MAAO,CAACkB,MAAO,SAA7D,UACE,eAACD,EAAA,EAAKE,OAAN,WACGZ,GAAWnH,EAAQC,OAAS,mBAAG5B,UAAU,+BAA+BuI,MAAO,CAACoB,MAAO,MAAOC,SAAU,UAAWvJ,MAAM,8BAAgC,KAC1J,cAACmJ,EAAA,EAAKK,MAAN,CAAY7J,UAAU,OAAtB,SAA8B2B,EAAQ6B,iBAGxC,eAACgG,EAAA,EAAKM,KAAN,WACE,eAACN,EAAA,EAAKO,KAAN,CAAW/J,UAAU,4BAArB,UACE,kDADF,IACiC2B,EAAQ+B,YADzC,IACsD,uBACpD,2DAFF,IAE0C/B,EAAQiC,OAFlD,MAE4D,uBAC1D,sDAHF,IAGqCjC,EAAQmC,eAH7C,KAG8D,uBAC5D,iDAJF,IAIgCnC,EAAQqC,WAJxC,MAIsD,uBACnDrC,EAAQC,OAAS,gCAAK,kDAAL,IAAoCD,EAAQuC,KAAK,0BAAc,gCAAK,mDAAL,IAAqCvC,EAAQuC,KAAK,0BACnI,4CAAuB,uBANzB,IAMkD,KAAlBvC,EAAQyC,MAAe,MAAQzC,EAAQyC,SAEvE,eAACqD,EAAA,EAAD,CAAKzH,UAAU,OAAf,UACE,cAAC0H,EAAA,EAAD,UAEI/F,EAAQC,OAAS,cAAC+F,EAAA,EAAD,CAAQC,KAAK,KAAKC,QAASG,EAC5C9H,GAAIyB,EAAQ+E,IADK,sCACoC,OAGzD,cAACgB,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAQG,QAAQ,SAASF,KAAK,KAAKC,QAASM,EAAcjI,GAAIyB,EAAQ+E,IAAtE,8BAEF,cAACgB,EAAA,EAAD,UAEI/F,EAAQC,OACN,cAAC,IAAD,CAAMqB,GAAG,IAAT,SACE,cAAC0E,EAAA,EAAD,CAAQG,QAAQ,UAAUF,KAAK,KAAKC,QAAS,kBAAMK,EAAgBvG,IACnEzB,GAAIyB,EAAQ+E,IADZ,iCAGF,eAhCD/E,EAAQ+E,MAyCnBsD,EAAY,SAAC,GAAoB,IAAnBzG,EAAkB,EAAlBA,aAClB,OACE,eAACiG,EAAA,EAAD,CAAMtJ,GAAG,aAAT,UACE,cAACsJ,EAAA,EAAKE,OAAN,UACE,eAACF,EAAA,EAAKK,MAAN,CAAY7J,UAAU,OAAtB,yBAA0CuD,EAAe,QAAU,WAAnE,0BAEF,cAACiG,EAAA,EAAKM,KAAN,UACE,eAACN,EAAA,EAAKO,KAAN,8CACmCxG,EAAe,+BAAiC,iCADnF,KACuH,uBACpHA,EAAe,2DAA6D,mF","file":"static/js/main.3db2fcff.chunk.js","sourcesContent":["const FormInput = (props) => {\r\n    return (\r\n        <div>\r\n            <input \r\n                className=\"form-control\"\r\n                type={props.type} \r\n                id={props.for}\r\n                name={props.title}\r\n                onChange={(event) => {\r\n                    if(parseInt(event.target.value) && parseInt(event.target.value) < 0) {\r\n                        return\r\n                    } else {\r\n                        props.onChange(event.target.value);\r\n                    }\r\n                }}\r\n                value={props.value}\r\n                placeholder={props.title}\r\n                required\r\n                readOnly={props.readOnly ? props.readOnly : false}\r\n            /><br/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FormInput;","const NotesInput = (props) => {\r\n    return (\r\n        <div>\r\n            <textarea \r\n            class=\"form-control\" \r\n            id={props.for} \r\n            rows=\"3\" \r\n            onChange={(event) => props.onChange(event.target.value)}\r\n            placeholder={props.title}\r\n            value={props.value ? props.value : null}\r\n            /><br/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NotesInput;","import React, { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport FormInput from './inputs/FormInput';\nimport NotesInput from './inputs/NotesInput';\nimport axios from 'axios';\nimport { compareDesc, format, parseISO } from 'date-fns'\nimport { Container, Form, Button, Row, Col, Navbar, Nav, Card } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport './index.css';\nimport 'react-toastify/dist/ReactToastify.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\ntoast.configure();\n\nfunction App() {\n  const [projects, setProjects] = useState([]);\n  const [edit, setEdit] = useState(false);\n  const [selectedProject, setSelectedProject] = useState({});\n  const activeProjects = projects.filter(project => project.active === true).length;\n  const archivedProjects = projects.filter(project => project.active === false).length;\n\n  async function getProjects () {\n    const getProjects = await axios.get('/fermentation/projects')\n      .then(response => {setProjects(response.data)})\n      .catch(error => console.log(error));\n  }\n\n  useEffect(() => {getProjects()}, []);\n\n  return (\n    <Router>\n      <Navbar bg=\"light\" expand=\"lg\">\n        <Navbar.Brand>Fermentation Tracker</Navbar.Brand>\n        <Nav className=\"mr-auto\">\n          <Nav.Link><Link to=\"/\">Project Form</Link></Nav.Link>\n          <Nav.Link><Link to=\"/active\">{activeProjects} Active Projects</Link></Nav.Link>\n          <Nav.Link><Link to=\"/archive\">{archivedProjects} Archived Projects</Link></Nav.Link>\n        </Nav>\n      </Navbar>\n\n      <Switch>\n        <Route exact path=\"/\" component={() => <ProjectForm projects={projects} setProjects={setProjects} setEdit={setEdit} edit={edit} selectedProject={selectedProject}/>} />\n        <Route exact path=\"/active\" component={() => <ProjectDisplay projects={projects} setProjects={setProjects} setEdit={setEdit} setSelectedProject={setSelectedProject} projectState={true} />} />\n        <Route exact path=\"/archive\" component={() => <ProjectDisplay projects={projects} setProjects={setProjects} projectState={false} />} />\n      </Switch>\n    </Router>\n  );\n}\n\nfunction ProjectForm ({ projects, setProjects, setEdit, edit, selectedProject }) {\n  const [projectName, setProjectName] = useState(null);  \n  const [description, setDescription] = useState(null);\n  const [weight, setWeight] = useState(null);\n  const [saltPercentage, setSaltPercentage] = useState(null);\n  const [saltWeight, setSaltWeight] = useState(null);\n  const [time, setTime] = useState(null);\n  const [notes, setNotes] = useState(null);\n  const [projectId, setProjectId] = useState(null);\n  const fields = [\n    {element: document.getElementById(\"project\")},\n    {element: document.getElementById(\"description\")},\n    {element: document.getElementById(\"weight\")},\n    {element: document.getElementById(\"salt\")},\n    {element: document.getElementById(\"time\")}\n  ]\n\n  // validate form inputs\n  const validateForm = () => {\n    let formValid = true;\n    fields.forEach(field => field.element.classList.remove(\"form-error\"));\n    \n    if (projectName === null) {\n      fields[0].element.classList.add(\"form-error\");\n      formValid = false;\n    }\n    if (description === null) {\n      fields[1].element.classList.add(\"form-error\");\n      formValid = false;\n    }\n    if (weight === null) {\n      fields[2].element.classList.add(\"form-error\");\n      formValid = false;\n    }\n    if (saltPercentage === null) {\n      fields[3].element.classList.add(\"form-error\");\n      formValid = false;\n    }\n    if (time === null) {\n      fields[4].element.classList.add(\"form-error\");\n      formValid = false;\n    }\n    \n    return formValid;\n  }\n\n  // build project object if validation sucessful\n  const buildProject = () => {\n    if (validateForm() === true) {\n      const newProject = {\n        projectName: projectName,\n        description: description,\n        weight: weight,\n        saltPercentage: saltPercentage,\n        saltWeight: saltWeight,\n        time: time,\n        active: true,\n        notes: notes\n      }\n      return {built: true, newProject: newProject};\n    } else {\n      window.alert('Please fill out all of the fields!');\n      return {built: false};\n    }\n  }\n    \n  // handle form button submitting new project\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    const project = buildProject();\n\n    if (project.built) {\n      addProject(project.newProject)\n        .then(response => setProjects([...projects, response]));\n\n      toast.success(\"Project Added!\", {\n        position: \"bottom-center\",\n        autoClose: 3000,\n        hideProgressBar: true,\n        closeOnClick: true,\n        pauseOnHover: false,\n        draggable: false,\n        progress: undefined\n      });\n\n      handleReset();\n    }\n  }\n  \n  // handle form button click for submitting edits\n  const handleEdit = async (e) => {\n    e.preventDefault();\n    const update = buildProject();\n    console.log(\"EDIT BUTTON PRESSED\")\n\n    if (update.built){\n      updateProject(projectId, update.newProject).then(id => update.newProject._id = id);\n\n      const index = projects.findIndex(project => project._id === projectId);\n      const updateLocal = [...projects];\n      updateLocal.splice(index, 1, update.newProject);\n      setProjects(updateLocal);\n\n      handleReset();\n      \n      toast.success(\"Project Updated!\", {\n        position: \"bottom-center\",\n        autoClose: 3000,\n        hideProgressBar: true,\n        closeOnClick: true,\n        pauseOnHover: false,\n        draggable: false,\n        progress: undefined\n      })\n    }\n  }\n\n  // handle canceling edits click\n  const handleCancel = () => {\n    handleReset();\n      \n    toast.warning(\"Updates Canceled!\", {\n      position: \"bottom-center\",\n      autoClose: 3000,\n      hideProgressBar: true,\n      closeOnClick: true,\n      pauseOnHover: false,\n      draggable: false,\n      progress: undefined\n    });\n  }\n\n  // reset form and states to default\n  const handleReset = () => {\n    if (edit) {\n      const button = document.getElementById(\"formButton\");\n      button.innerHTML = \"Submit\";\n    }\n\n    fields.forEach(field => field.element.value=\"\");\n    fields.forEach(field => field.element.classList.remove(\"form-error\"));\n\n    setEdit(false);\n    setProjectName(null);\n    setDescription(null);\n    setWeight(null);\n    setSaltPercentage(null);\n    setTime(null);\n    setNotes(null);\n    setProjectId(null);\n  }\n\n\n  // post new project\n  const addProject = async (newProject) => {\n    let addedProject;\n\n    await axios.post('/fermentation/projects', newProject)\n      .then(response => {\n        addedProject = response.data.addedProject;\n      }).catch(error => console.log(error));\n\n    return addedProject;\n  }\n\n  // post edits to existing project\n  const updateProject = async (idToUpdate, updatedProject) => {\n    let updatedID;\n\n    await axios.patch('/fermentation/projects/update', {id: idToUpdate, project: updatedProject})\n      .then(response => updatedID = response.data.id)\n      .catch(error => console.log(error));\n\n    return updatedID;\n  }\n\n  // fill form to with project details\n  const setFormToEdit = () => {\n    if (edit) {\n      const button = document.getElementById(\"formButton\");\n      button.innerHTML = \"Submit Changes\";\n\n      setProjectName(selectedProject.projectName);\n      setDescription(selectedProject.description);\n      setWeight(selectedProject.weight);\n      setSaltPercentage(selectedProject.saltPercentage);\n      setTime(selectedProject.time);\n      setNotes(selectedProject.notes);\n      setProjectId(selectedProject._id);\n    }\n  }\n  \n  const saltTotal = () => {\n    setSaltWeight((weight * (saltPercentage / 100)).toFixed(2));\n  }\n\n  useEffect(() => {saltTotal()}, [weight, saltPercentage]);\n\n  useEffect(() => {setFormToEdit()}, [edit]);\n\n  return (\n    <div className=\"section\">\n        <div className=\"box\">\n          <Form id=\"form\">\n            <Form.Label className=\"label\">Fermentation Tracker</Form.Label>\n              <Row className=\"mt-2\">\n                <Col>\n                  <FormInput for=\"project\" type=\"text\" title=\"Project Name\" onChange={setProjectName} value={projectName} />\n                </Col>\n              </Row>\n              <Row className=\"mt-2\">\n                <Col>\n                  <FormInput for=\"description\" type=\"text\" title=\"Description\" onChange={setDescription} value={description} />\n                </Col>\n              </Row>\n              <Row className=\"mt-2\">\n                <Col>\n                  <FormInput for=\"weight\" type=\"number\" title=\"Dry Weight of Ferment (g)\" onChange={setWeight} value={weight} />\n                </Col>\n              </Row>\n              <Row className=\"mt-2\">\n                <Col>\n                  <FormInput for=\"salt\" type=\"number\" title=\"Salt %\" onChange={setSaltPercentage} value={saltPercentage} />\n                </Col>\n              </Row>\n              <Row>\n                <Col>\n                  <label>Calculated Salt Weight (g)</label>\n                  <FormInput for=\"saltWeight\" type=\"number\" title=\"Salt Weight (g)\" value={saltWeight} readOnly={true} />\n                </Col>\n              </Row>\n              <Row>\n                <Col>\n                  <label>Complete on</label>\n                  <FormInput for=\"time\" type=\"date\" title=\"Complete on\" onChange={setTime} value={time} />\n                </Col>\n              </Row>\n              <Row>\n                <Col>\n                  <label>Additional Notes?</label><br/>\n                  <NotesInput for=\"notes\" type=\"text\" title=\"Additional notes\" onChange={setNotes} value={notes} />\n                </Col>\n              </Row>\n              <Row>\n                <Col>\n                  <Button \n                    size=\"lg\"\n                    type=\"submit\" \n                    id=\"formButton\" \n                    onClick={(e) => {\n                      if (edit) {\n                        handleEdit(e);\n                      } else {\n                        handleSubmit(e);\n                      }\n                    }}>Submit</Button>\n                </Col>\n                <Col>\n                  {edit ? <Button variant=\"danger\" size=\"lg\" onClick={() => handleCancel()}>Cancel changes</Button> \n                  : \n                  <Button variant=\"danger\" size=\"lg\" onClick={() => handleReset()}>Clear Form</Button>}\n                </Col>\n              </Row>\n          </Form>\n        </div>\n    </div>\n  )\n}\n\nfunction ProjectDisplay ({ projects, setProjects, projectState, setEdit, setSelectedProject }) {\n\n  const filter = projects.filter(project => project.active === projectState);\n\n  // sets project status to complete\n  const handleStatusChange = (e) => {\n    const confirm = window.confirm(\"Mark project as completed?\");\n    if (confirm === true) {\n      const setStatus = axios.patch('/fermentation/projects', {id: e.target.id})\n        .then(response => console.log(response))\n        .catch(error => console.log(error));\n\n      const index = projects.findIndex(project => project._id === e.target.id);\n      projects[index].active = false;\n\n      setProjects([...projects]);\n\n      toast.success(\"Project moved to archive!\", {\n        position: \"bottom-center\",\n        autoClose: 4000,\n        hideProgressBar: true,\n        closeOnClick: true,\n        pauseOnHover: false,\n        draggable: false,\n        progress: undefined\n      })\n\n    }\n  }\n\n  // Set form to edit\n  const handleEditClick = (project) => {\n    setSelectedProject(project);\n    setEdit(true);\n  }\n\n  // deletes project from database\n  const handleDelete = (e) => {\n    const confirm = window.confirm(\"Are you sure you want to delete this project?\");\n      if (confirm === true) {\n        const deleteProject = axios.delete('/fermentation/projects', {data: {id: e.target.id}})\n          .then(response => console.log(response))\n          .catch(error => console.log(error));\n\n        const updatedProjects = projects.filter(project => project._id !== e.target.id);\n        setProjects(updatedProjects);\n        \n        toast.success(\"Project Deleted!\", {\n          position: \"bottom-center\",\n          autoClose: 3000,\n          hideProgressBar: true,\n          closeOnClick: true,\n          pauseOnHover: false,\n          draggable: false,\n          progress: undefined\n        })\n      }\n  }\n\n  return (\n    <Container style={{height: \"100rem\"}}>\n      <Row>\n        {\n          filter.length === 0 ? \n            <Col className=\"d-flex justify-content-center\">\n              <EmptyCard projectState={projectState}/>\n            </Col>\n          :\n          filter.map(project => {\n            return <ProjectCard project={project} handleStatusChange={handleStatusChange} handleDelete={handleDelete} handleEditClick={handleEditClick}/>\n          })\n        }\n      </Row>\n    </Container>\n  )\n}\n\nconst ProjectCard = ({project, handleStatusChange, handleDelete, handleEditClick}) => {\n  const [pastDue, setPastDue] = useState(false);\n\n  // check to see if before or after due date\n  const checkDate = (projectDate) => {\n    const today = format(new Date(), \"yyyy-MM-dd\");\n    const projectDue = format(parseISO(projectDate), \"yyyy-MM-dd\");\n\n    if (compareDesc(parseISO(today), parseISO(projectDue)) < 0) {\n      setPastDue(true);\n    }\n  }\n\n  // set pastDue state on component mount \n  useEffect(() => {checkDate(project.time)}, []);\n\n  return (\n      <Card key={project._id} className=\"mt-4 ml-4\" style={{width: \"40rem\"}}>\n        <Card.Header>\n          {pastDue && project.active ? <i className=\"fas fa-exclamation mr-4 mt-1\" style={{color: \"red\", fontSize: \"1.5rem\"}} title=\"This project is past due!\"/> : null}\n          <Card.Title className=\"mt-1\">{project.projectName}</Card.Title>\n        </Card.Header>\n          \n        <Card.Body>\n          <Card.Text className=\"text-left project-details\">\n            <strong>Description:</strong> {project.description} <br/>\n            <strong>Total Dry Weight (g):</strong> {project.weight} g <br/>\n            <strong>Salt Percentage:</strong> {project.saltPercentage}% <br/>\n            <strong>Total Salt:</strong> {project.saltWeight} g <br/>\n            {project.active ? <div><strong>Complete on:</strong> {project.time}<br/></div> : <div><strong>Completed on:</strong> {project.time}<br/></div>}\n            <strong>Notes:</strong><br/> {project.notes === \"\" ? \"N/A\" : project.notes}\n          </Card.Text>\n          <Row className=\"mt-4\">\n            <Col>\n              {\n                project.active ? <Button size=\"md\" onClick={handleStatusChange} \n                id={project._id}>Mark Project As Complete</Button> : null\n              }\n            </Col>\n            <Col>\n              <Button variant=\"danger\" size=\"md\" onClick={handleDelete} id={project._id}>Delete Project</Button>\n            </Col>\n            <Col>\n              {\n                project.active ? \n                  <Link to=\"/\">\n                    <Button variant=\"warning\" size=\"md\" onClick={() => handleEditClick(project)}\n                    id={project._id}>Edit This Project</Button>\n                  </Link>\n                : null\n              }\n            </Col>\n          </Row>\n        </Card.Body>\n      </Card>\n    )\n}\n\nconst EmptyCard = ({projectState}) => {\n  return (\n    <Card id=\"empty-card\">\n      <Card.Header>\n        <Card.Title className=\"mt-2\">You haven't {projectState ? \"added\" : \"archived\"} any projects yet!</Card.Title>\n      </Card.Header>\n      <Card.Body>\n        <Card.Text>\n          This page will contain projects {projectState ? \"you're currently working on!\" : \"you've completed and archived!\" }. <br></br>\n          {projectState ? \"You can start tracking projects by filling out the form!\" : \"You can complete and archive a project in the active projects screen!\"}\n        </Card.Text>\n      </Card.Body>\n    </Card>\n  )\n}"],"sourceRoot":""}